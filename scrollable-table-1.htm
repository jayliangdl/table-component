<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <title>单表格前N列冻结示例</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: sans-serif;
      overflow: hidden;
    }
    .table-container {
      width: 100vw;
      height: 90vh;
      overflow: auto;
      border: 1px solid #ccc;
      background: #fafbfc;
    }
    table {
      border-collapse: collapse;
      /* min-width: 1200px; */
      width: max-content;
      background: #fff;
    }
    th, td {
      border: 1px solid #ddd;
      padding: 8px 16px;
      white-space: nowrap;
      background: #fff;
    }
    th {
        position: sticky;
        top: 0;
        z-index: 2;
        background: #f5f5f5;
    }
    /* 冻结列样式，JS会动态加 class="sticky-colX" */
    /* 通用冻结列样式，支持任意数量 */
    [class^="sticky-col"] {
      position: sticky;
      top: 0;
      background: #e6f7ff;
    }
    /* 冻结列的表头，z-index更高，避免被内容覆盖 */
    th[class^="sticky-col"] {
      z-index: 10;
    }
    /* 冻结列的内容单元格，z-index略低 */
    td[class^="sticky-col"] {
      z-index: 4;
    }
    /* 可根据需要继续扩展 sticky-col5、sticky-col6 ... */
    tr:hover td { background: #f0faff; }
  </style>
</head>
<body>
  <h2 style="margin:16px;">单表格前N列冻结演示</h2>
  <div style="margin: 0 16px 16px 16px;">
    冻结前 <input id="freezeCount" type="number" min="0" max="10" value="2" style="width:40px;"> 列
    <button onclick="renderTable()">刷新</button>
  </div>
  <div class="table-container">
    <table id="myTable"></table>
  </div>
  <script>
    // 生成测试数据
    const colCount = 12;
    const rowCount = 40;
    const columns = Array.from({length: colCount}, (_, i) => `字段${i+1}`);
    const data = Array.from({length: rowCount}, (_, r) =>
      Array.from({length: colCount}, (_, c) => `R${r+1}-C${c+1}`)
    );

    // 生成表格
    function renderTable() {
      const freezeN = Math.max(0, Math.min(colCount, Number(document.getElementById('freezeCount').value)));
      const table = document.getElementById('myTable');
      // 先清空
      table.innerHTML = '';
      // 计算每列宽度
      const colWidths = [];
      for (let c = 0; c < colCount; c++) {
        // 你可以自定义每列宽度
        colWidths[c] = 100 + (c % 3) * 30;
      }
      // 设置 CSS 变量
      for (let i = 0; i < freezeN; i++) {
        document.documentElement.style.setProperty(`--col${i}-width`, colWidths[i] + 'px');
      }
      // 计算每列的left累加值
      const lefts = [];
      let acc = 0;
      for (let i = 0; i < colCount; i++) {
        lefts[i] = acc;
        acc += colWidths[i];
      }

      // 表头
      const thead = document.createElement('thead');
      const trHead = document.createElement('tr');
      for (let c = 0; c < colCount; c++) {
        const th = document.createElement('th');
        th.textContent = columns[c];
        th.style.width = colWidths[c] + 'px';
        if (c < freezeN) {
          th.classList.add(`sticky-col${c}`);
          th.style.left = lefts[c] + 'px';
        }
        trHead.appendChild(th);
      }
      thead.appendChild(trHead);
      table.appendChild(thead);
      // 表体
      const tbody = document.createElement('tbody');
      for (let r = 0; r < rowCount; r++) {
        const tr = document.createElement('tr');
        for (let c = 0; c < colCount; c++) {
          const td = document.createElement('td');
          td.textContent = data[r][c];
          td.style.width = colWidths[c] + 'px';
          if (c < freezeN) {
            td.classList.add(`sticky-col${c}`);
            td.style.left = lefts[c] + 'px';
          }
          tr.appendChild(td);
        }
        tbody.appendChild(tr);
      }
      table.appendChild(tbody);
    }
    renderTable();
  </script>
</body>
</html>